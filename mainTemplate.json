{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  "parameters": {    
    "vhdStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Specifies the type of storage account, if being created."
      }
    },
    
    "vhdStorageNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Specifies whether the storage account should be created or already exists."
      }
    },

    "userImageContainerName": {
      "type": "string",
      "defaultValue": "images3",
      "metadata": {
        "description": "Specifies a storage container in the account specified by 'vhdStorageAccount' in which user images of XenApp 7.7 reside."
      }
    },

    "imageType": {
      "type": "string",
      "defaultValue": "Gallery",
      "allowedValues": [
        "Gallery",
        "User"
      ],
      "metadata": {
        "description": "Specifies whether the template should deploy from the Azure Marketplace gallery or from user images in the storage account specified by 'vhdStorageAccount."
      }
    },

    "imageQualifier": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "-preview"
      ],
      "metadata": {
        "description": "Specifies an additional qualifier to use for Marketplace image references. The value 'preview' is for images in staging, while the default value references production images."
      }
    },

    // Public IP
    "publicDnsName": {
      "type": "string",
      "defaultValue": "[toLower(substring(concat('xenapp', uniqueString(subscription().subscriptionId,resourceGroup().id)), 0, 13))]",
      "metadata": {
        "description": "Specifies a unique public DNS prefix for the deployment. This will produce a FQDN of the form '<publicDnsName>.<location>.cloudapp.azure.com'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to '^[a-z][a-z0-9-]{1,61}[a-z0-9]$'."
      }
    },

    "publicIpGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Specifies the resource group which should contain the public IP."
      }
    },

    "publicIpName": {
      "type": "string",
      "defaultValue": "PublicIp",
      "metadata": {
        "description": "Specifies the resource name for the public IP. New IPs will take this name, while references to existing ones should be valid."
      }
    },

    "publicIpNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Specifies whether the public IP should be created or already exists."
      }
    },

    // Infrastructure
    "machineSize": {
      "type": "string",
      "defaultValue": "Standard_A2",
      "metadata": {
        "description": "Specifies the size of the virtual machines (6)."
      }
    },
  
    // Credentials and domain
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the administrator for machines, Active Directory domain, NetScaler and XenApp. Exclusion list: 'admin','administrator'. Must be no more than 9 alphanumeric characters."
      }
    },


    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the password of the administrator for machines, Active Directory domain, NetScaler and XenApp."
      }
    },

    "domainName": {
      "type": "string",
      "defaultValue": "xenapp.local",
      "metadata": {
        "description": "Specifies the name of the newly created Active Directory domain."
      }
    },
    
    "emailAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the email address that that will be used to request a public SSL certificate for NetScaler gateway from letsencrypt.org on your behalf. This will also be used to notify you when the template has deployed successfully."
      }
    },

    "certificateAuthority": {
      "type": "string",
      "defaultValue": "ACME",
      "allowedValues": [
        "ACME",
        "Enterprise"
      ],
      "metadata": {
        "description": "Specifies whether an ACME CA or the internal Enterprise CA should be used for obtaining certificates."
      }
    },

    "acmeServer": {
      "type": "string",
      "defaultValue": "https://acme-v01.api.letsencrypt.org/",
      "allowedValues": [
        "https://acme-staging.api.letsencrypt.org/",
        "https://acme-v01.api.letsencrypt.org/"
      ],
      "metadata": {
        "description": "Specifies the ACME protocol server used for public TLS certificate requests. Allowed values correspond to letsencrypt.org staging or production."
      }
    },

    "customInboundRules": {
      "type": "object",
      "defaultValue": {
        "rules": [
        ],
        "assignments": {
          "deliveryController": [],
          "domainController": [],
          "jumpBox": [],
          "netScaler": [],
          "vda": [],
          "vdi": []
        }
      },
      "metadata": {
        "description": "Specifies additional inbound NAT rules to apply in this deployment. Useful for exposing individual machines more directly. The parameter is specified as an object, as in the default. See variable 'loadBalancerSettings' for an example format."
      }
    },

    "customApplications": {
      "type": "object",
      "defaultValue": {
        "chocolateyPackages": [],
        "publishedApplications": [],
        "appGroups": []
      },
      "metadata": {
        "description": "Specifies additional applications to be installed on the VDA and published through XenApp. The parameter is specified as an array of objects, as in the default. See variables 'applications', 'vdaSettings', and 'storeFrontSettings' for an example format. "
      }
    },

    // Configuration
    "artifactsBaseUrl": {
      "type": "string",
      "metadata": {
        "artifactsBaseUrl": "",
        "description": "Specifies the base location of the child templates and desired state configuration scripts."
      },
      "defaultValue": "https://raw.githubusercontent.com/simongdavies/cuddly-octo-fortnight/master"
    },

    "artifactsBaseUrlSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the shared access signature token which provides access to the base artifacts location."
      },
      "defaultValue": ""
    },
    "AzureCloud": {
      "type": "string",
      "metadata": {
        "description": "Specifies the shared access signature token which provides access to the base artifacts location."
      },
      "defaultValue": "azureGlobal",
      "allowedValues": [
        "azureGlobal",
        "azureGov",
        "azureChina",
        "azureGermany"
      ]
    },
    "azureGov": {
      "type": "string",
      "metadata": {
        "description": "Specifies the shared access signature token which provides access to the base artifacts location."
      },
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },

    // Weather the Deployment Deploys Cloud Connector or Delivery Controller
    "XAControllerDeployType": {
      "type": "string",
      "metadata": {
        "description": "Specifies If Need to Connect to Cloud Connector or Bringup DDC."
      },
      "defaultValue": "CloudConnectorSettings",
      "allowedValues": [
        "deliveryControllerSettings",
        "CloudConnectorSettings"
      ]
    },

    //Cloud Connector Settings
    "Customer": {
      "type": "string",
      "metadata": {
        "description": "This is the customer ID available in the Citrix Cloud console on the API Access page (within Identity and Access Management)."
      }
    },

    "clientID": {
      "type": "string",
      "metadata": {
        "description": "Found on the API Access page. This is the secure client ID an administrator can create."
      }
    },

    "clientSecret": {
      "type": "string",
      "metadata": {
        "description": "Found on the API Access page. This is the secure client secret available via download after a secure client is created."
      }
    },

    "ResourceLocationId": {
      "type": "string",
      "metadata": {
        "description": "This ID can be retrieved on the Resource Locations page using the ID button."
      }
    },

    "DeploymentType": {
      "type": "string",
      "metadata": {
        "description": "Select if Deployment is for XenApp or XenDesktop"
      },
      "defaultValue": "XenDesktop",
      "allowedValues": [
        "XenDesktop",
        "XenApp"
      ]
    },

    "UseTestControlPlane": {
      "type": "string",
      "metadata": {
        "description": "Specify if the DDC used to provision is in test Control Plane or Production Control Plane"
      },
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },

    "CreateMasterImage": {
      "type": "string",
      "metadata": {
        "description": "Specify wether VDI should be provisioned or Not."
      },
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },

    "CustomCloudConnectorScriptUri": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "If there is custom Script that needs to run on Connector."
      }
    },

    "CustomCloudConnectorScriptArgs": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "If there any Arguments that needs to be passed to script."
      }
    },

    "CreateClientVDI": {
      "type": "string",
      "metadata": {
        "description": "Select if Default Client VDI should be installed or any custom version of VDI needs to be installed."
      },
      "defaultValue": "true",
      "allowedValues": [
        "true",
        "false"
      ]
    },

    "ClientVDIInstallerUri": {      
      "type": "string",
      "metadata": {
        "description": "If customClientVDI is selected, Enter the path of VDI Installer or else leave it blank."
      }
    },

    "CreateSharedHostedVDI": {
      "type": "string",
      "metadata": {
        "description": "Select if Default Server VDI should be installed or any custom version of VDI needs to be installed."
      },
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },

    "SharedHostedVDIInstallerUri": {
      "type": "string",
      "metadata": {
        "description": "If customServerVDI is selected, Enter the path of VDI Installer or else leave it blank."
      }
    }
  },
    
  "variables": {	  
  
		"siteName":"XenAppOnAzure",      
		"html5Mode": "Fallback",    	
	  "vhdStorageAccount":"[toLower(substring(concat('xenapp',uniqueString(subscription().subscriptionId,resourceGroup().id)), 0, 13))]",    	
	  "vhdStorageGroup":  "[resourceGroup().name]",     	
	  "location": "[resourceGroup().location]",	  
      "artifactsLocation": "[concat(parameters('artifactsBaseUrl'),'/')]",
      "artifactsLocationSasToken": "[parameters('artifactsBaseUrlSasToken')]",
      "deploymentFQDNPublicCloudtrue": "[concat(parameters('publicDnsName'), '.', variables('location'), '.cloudapp.azure.com')]",
      "deploymentFQDNPublicCloudfalse": "[concat(parameters('publicDnsName'), '.', variables('location'), '.cloudapp.usgovcloudapi.net')]",
      "deployFQDN": {
        "true": {
          "deploymentFQDN": "[concat(parameters('publicDnsName'), '.', variables('location'), '.cloudapp.usgovcloudapi.net')]"
        },
        "false": {
          "deploymentFQDN": "[concat(parameters('publicDnsName'), '.', variables('location'), '.cloudapp.azure.com')]"
        }
      },
	  
	  "XAcontrollerSettings" :{
	    "deliveryControllerSettings": {
          "templateUri": "[concat(variables('artifactsLocation'), 'creatingDeliveryController', parameters('imageType'), '.json')]",
		  "extensionUri": "[concat(variables('artifactsLocation'), 'creatingDeliveryControllerGalleryExtension.json')]",
		  "userImageUri": "[concat(variables('userImageLocation'), 'XD-ALL.vhd')]",
		  "publisher": "citrix",
		  "offer": "[concat('xenapp-server', parameters('imageQualifier'))]",
		  "sku": "coldfireserver",
		  "machineName": "XD-Controller",
		  "fqdn": "[concat('XD-Controller', '.', parameters('domainName'))]",
		  "machineSize": "[parameters('machineSize')]",
		  "location": "[variables('location')]",
		  "privateIp": "10.0.0.9",
		  "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DeliveryController.ps1.zip')]",
		  "configurationFunction": "DeliveryController.ps1\\DeliveryController",
		  "inboundRulesInitial": [
			{ "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-http')]" }
		  ],
		  "inboundRulesFinal": [ ]
        },
        "CloudConnectorSettings": {
		  "templateUri": "[concat(variables('artifactsLocation'), 'creatingCloudConnector', parameters('imageType'), '.json')]",
		  "extensionUri": "[concat(variables('artifactsLocation'), 'creatingCloudConnectorGalleryExtension.json')]",
		  "userImageUri" : "",
          "publisher": "MicrosoftWindowsServer",
		  "offer": "WindowsServer",
		  "sku": "2012-R2-Datacenter",
		  "machineName": "CloudConnector",
		  "nicName": "CloudConnector",
		  "OSDiskName": "CloudConnectorOSDisk",
		  "fqdn": "[concat('cloudConnector', '.', parameters('domainName'))]",
		  "machineSize": "[parameters('machineSize')]",		  
		  "location": "[variables('location')]",
		  "privateIp": "10.0.0.7",
		  "customerId": "[parameters('Customer')]",
		  "clientId": "[parameters('clientID')]",
		  "ClientSecret": "[parameters('clientSecret')]",
		  "ResourceLocationId": "[parameters('ResourceLocationId')]",
		  "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DeployCitrixCloudConnector.ps1.zip')]",
          "configurationFunction": "DeployCitrixCloudConnector.ps1\\DeployCitrixCloudConnector",
          "prepareConfigurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DeployCitrixCloudConnector.ps1.zip')]",
          "prepareConfigurationFunction": "DeployCitrixCloudConnector.ps1\\DeployCitrixCloudConnector",
          "inboundRulesInitial": [
		    { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-http')]"}
			],
		  "inboundRulesFinal": [ ]
        }
	  },
	    "XAControllerSetting": "[variables('XAcontrollerSettings')[parameters('XAControllerDeployType')]]",	  
      "currentDeployFQDN": "[variables('deployFQDN')[parameters('azureGov')]]",
	  
      "deploymentFQDN": "[variables('currentDeployFQDN').deploymentFQDN]",
      "gatewayFQDN": "[concat(parameters('publicDnsName'), '-', variables('location'), '.xenapponazure.com')]",

      "userImageContainerName": "[parameters('userImageContainerName')]",
      "userImageLocation": "[concat('http://', variables('vhdStorageAccount'), '.blob.core.windows.net/', variables('userImageContainerName'), '/')]",

      "dscVersion": "2.19",

      "vnetName": "VirtualNetwork",
      "vnetAddressRange": "10.0.0.0/16",
      "subnetName": "Subnet",
      "subnetId": "[concat(resourceId('Microsoft.Network/virtualNetworks',variables('vnetName')), '/subnets/', variables('subnetName'))]",
      "dnsServers": [ "[variables('domainControllerSettings').privateIp]" ],

      "subnetAddressRange": "10.0.0.0/20",

      "creatingPublicIpUrl": "[concat(variables('artifactsLocation'), 'publicIp-', parameters('publicIpNewOrExisting'), '.json')]",
      "creatingStorageAccountUrl": "[concat(variables('artifactsLocation'), 'storageAccount-', parameters('vhdStorageNewOrExisting'), '.json')]",
      "creatingLoadBalancerUrl": "[concat(variables('artifactsLocation'), 'creatingLoadBalancer.json')]",
      "updatingVnetDnsUrl": "[concat(variables('artifactsLocation'), 'updatingVnetDns.json')]",
      "updatingNicRulesUrl": "[concat(variables('artifactsLocation'), 'updatingNicRules.json')]",
      "updatingInboundRuleUrl": "[concat(variables('artifactsLocation'), 'updatingInboundRule.json')]",

      "availabilitySetName": "AvailabilitySet",
      "availabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",

      "loadBalancerSettings": {
        "name": "LoadBalancer",
        "id": "[resourceId('Microsoft.Network/loadBalancers', 'LoadBalancer')]",
        "lbapid": "[concat( resourceId('Microsoft.Network/loadBalancers','loadBalancer'), '/backendAddressPools/LBBAP')]",
        "rulesPath": "[concat(resourceId('Microsoft.Network/loadBalancers', 'LoadBalancer'), '/inboundNatRules/')]",
        "defaultInboundRules": [
          {
            "name": "ns-http",
            "frontendPort": "[variables('ports').http]",
            "backendPort": 80
          },
          {
            "name": "ns-https",
            "frontendPort": "[variables('ports').https]",
            "backendPort": 11443
          },
          {
            "name": "jump-rdp",
            "frontendPort": 3389,
            "backendPort": 3389
          }
        ]
      },

      "jumpBoxSettings": {
        "templateUri": "[concat(variables('artifactsLocation'), 'creatingJumpBox.json')]",
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-R2-Datacenter",
        "machineName": "XD-JumpBox",
        "machineSize": "[parameters('machineSize')]",
        "location": "[variables('location')]",
        "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/JumpBox.ps1.zip')]",
        "configurationFunction": "JumpBox.ps1\\JumpBox",
        "inboundRules": [
			{"id": "[concat(variables('loadBalancerSettings').rulesPath, 'jump-rdp')]"}
        ],
        "shortcuts": [
          "[variables('applications')[0]]",
          "[variables('applications')[1]]",
          "[variables('applications')[2]]",
          "[variables('applications')[3]]",
          "[variables('applications')[4]]"
        ]
      },

      "domainControllerSettings": {
        "templateUri": "[concat(variables('artifactsLocation'), 'creatingDomainController.json')]",
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-R2-Datacenter",
        "machineName": "XD-DC",
        "fqdn": "[concat('XD-DC', '.', parameters('domainName'))]",
        "machineSize": "[parameters('machineSize')]",
        "location": "[variables('location')]",
        "privateIp": "10.0.0.8",
        "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DomainController.ps1.zip')]",
        "configurationFunction": "DomainController.ps1\\DomainController",
        "inboundRules": [ ]
      },

      "sqlServerSettings": {
        "machineName": "[variables('XAControllerSetting').machineName]",
        "fqdn": "localhost",
        "instance": "SQLEXPRESS"
      },
	  	  
      "licenseServerSettings": {
        "machineName": "[variables('XAControllerSetting').machineName]",
        "fqdn": "[variables('XAControllerSetting').fqdn]",
        "privateIp": "[variables('XAControllerSetting').privateIp]"
      },

      "storeFrontSettings": {
        "machineName": "[variables('XAControllerSetting').machineName]",
        "fqdn": "[variables('XAControllerSetting').fqdn]",
        "privateIp": "[variables('XAControllerSetting').privateIp]",
        "httpPort": "[variables('ports').http]",
        "gatewayName": "NetScaler",
        "themeUri": "[concat(variables('artifactsLocation'), 'Resources/receivertheme.tar.gz')]",
        "html5Mode": "[variables('html5Mode')]",
        "appGroups": [
          {
            "title": "Administrative Apps",
            "description": "Applications for a XenApp administrator",
            "tile": "appBundle1",
            "category": "Administrative Apps"
          },
          {
            "title": "Remote Desktop Connections",
            "description": "Connect to machines in the XenApp deployment",
            "tile": "appBundle2",
            "category": "Remote Desktop Connections"
          },
          {
            "title": "NetScaler Management",
            "description": "Applications for a NetScaler administrator",
            "tile": "appBundle3",
            "category": "NetScaler Management"
          },
          {
            "title": "Office 365 Apps",
            "description": "Applications for a Office 365",
            "tile": "appBundle3",
            "category": "Office Applications"
          }
        ]
      },


      "netScalerSettings": {
        "templateUri": "[concat(variables('artifactsLocation'), 'creatingNetscalerGallery.json')]",
        "userImageUri": "[concat(variables('userImageLocation'), 'ns-vpx.vhd')]",
        "publisher": "citrix",
        "offer": "[concat('netscalervpx111')]",
        "sku": "netscalerbyol",
        "version": "111.50.10",
        "virtualServerName": "StoreFront",
        "httpsPort": "[variables('ports').netScalerHttps]",
        "httpPort": "[variables('ports').netScalerHttp]",
        "machineName": "XD-NetScaler",
        "location": "[variables('location')]",
        "fqdn": "[concat('XD-NetScaler', '.', parameters('domainName'))]",
        "machineSize": "[parameters('machineSize')]",
        "privateIp": "10.0.0.11",
        "inboundRulesInitial": [
          { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-https')]" }
        ],
        "inboundRulesFinal": [
          { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-https')]" },
          { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-http')]" }
        ]
      },

      "ports": {
        "http": 80,
        "https": 443,
        "netScalerHttps": 11443,
        "netScalerHttp": 11480
      },

      "paths": {
        "iePath": "C:\\Program Files\\Internet Explorer\\iexplore.exe",
        "rdpPath": "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\\Remote Desktop Connection.lnk",
        "netScalerUrl": "[concat('http://', variables('netScalerSettings').privateIp)]"
		},

     
      "applications": [
        {
          "name": "Domain Controller",
          "category": "Remote Desktop Connections",
          "path": "[variables('paths').rdpPath]",
          "icon": "[variables('paths').rdpPath]",
          "arguments": "[concat('/v:', variables('domainControllerSettings').machineName, '.', parameters('domainName'))]"
        },
        {
          "name": "Cloud Connector",
          "category": "Remote Desktop Connections",
          "path": "[variables('paths').rdpPath]",
          "icon": "[variables('paths').rdpPath]",
          "type": "Shortcut",
          "arguments": "[concat('/v:', variables('XAControllerSetting').machineName, '.', parameters('domainName'))]"
        },
        {
          "name": "XenDesktop VDI",
          "category": "Remote Desktop Connections",
          "path": "[variables('paths').rdpPath]",
          "icon": "[variables('paths').rdpPath]",
          "arguments": "[concat('/v:', 'XD-VDI', '.', parameters('domainName'))]"
        },
        {
          "name": "NetScaler Web UI",
          "category": "NetScaler Management",
          "path": "[variables('paths').iePath]",
          "icon": "[variables('paths').iePath]",
          "arguments": "[variables('paths').netScalerUrl]"
        },
        {
          "name": "XenDesktop Server VDI",
          "category": "Remote Desktop Connections",
          "path": "[variables('paths').rdpPath]",
          "icon": "[variables('paths').rdpPath]",
          "arguments": "[concat('/v:', 'XD-VDIServer', '.', parameters('domainName'))]"
        }
      ],

      "vdiServerSettings": {
        "templateUri": "[concat(variables('artifactsLocation'), 'CreatingVDI', parameters('imageType'), '.json')]",                
		"extensionUri": "[concat(variables('artifactsLocation'), 'CreatingVDIServerGalleryExtension.json')]",
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-Datacenter",
        "vdiPrefix": "XD-VDIServer",
        "machineSize": "[parameters('machineSize')]",
		"machineName": "XD-VDIServer",
        "location": "[variables('location')]",
        "vdaCount": 1,
        "privateIp": "10.0.0.16",        
		"configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/VDIServer.ps1.zip')]",
        "configurationFunction": "VDIServer.ps1\\VDIServer",
		"prepareConfigurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/PrepareVDI.ps1.zip')]",
        "prepareConfigurationFunction": "VDI.ps1\\PrepareVDI",
        "inboundRules": [ ],
        "chocolateyPackages": [ ],
        "publishedApplications": [ ]
      },

      "vdiSettings": {
        "templateUri": "[concat(variables('artifactsLocation'), 'CreatingVDI', parameters('imageType'), '.json')]",                
		"extensionUri": "[concat(variables('artifactsLocation'), 'CreatingVDIGalleryExtension.json')]",
        "publisher": "MicrosoftWindowsServer",
        "offer": "Windows-HUB",
        "sku": "Windows-10-HUB",
        "vdiPrefix": "XD-VDI",
        "machineSize": "[parameters('machineSize')]",
		"machineName": "XD-VDI",
        "location": "[variables('location')]",
        "vdaCount": 1,
        "privateIp": "10.0.0.15",        
		"configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/VDI.ps1.zip')]",
        "configurationFunction": "VDI.ps1\\VDI",
		"prepareConfigurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/PrepareVDI.ps1.zip')]",
        "prepareConfigurationFunction": "VDI.ps1\\PrepareVDI",
        "inboundRules": [ ],
        "chocolateyPackages": [ ],
        "publishedApplications": [ ]
      }
    },

  "resources": [
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[variables('location')]",
      "dependsOn": [ ],
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "properties": {
        "platformFaultDomainCount": 2
      }
    },

    {
      "apiVersion": "2015-06-15",
      "name": "[variables('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [ "[variables('vnetAddressRange')]" ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRange')]"
            }
          }
        ]
      }
    },

    {
      "name": "CreatingPublicIp",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('creatingPublicIpUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "publicDnsName": {
            "value": "[parameters('publicDnsName')]"
          },
          "publicIpGroup": {
            "value": "[parameters('publicIpGroup')]"
          },
          "publicIpName": {
            "value": "[parameters('publicIpName')]"
          }
        }
      }
    },

    {
      "name": "CreatingStorageAccount",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('creatingStorageAccountUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "vhdStorageType": {
            "value": "[parameters('vhdStorageType')]"
          },
          "vhdStorageGroup": {
            "value": "[variables('vhdStorageGroup')]"
          }
        }
      }
    },

    {
      "name": "CreatingLoadBalancer",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingPublicIp",
        "Microsoft.Network/virtualNetworks/virtualNetwork",
        "Microsoft.Compute/availabilitySets/availabilitySet"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('creatingLoadBalancerUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIpName": {
            "value": "[parameters('publicIpName')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "publicIpGroup": {
            "value": "[parameters('publicIpGroup')]"
          },
          "loadBalancerName": {
            "value": "[variables('loadBalancerSettings').name]"
          },
          "inboundRules": {
            "value": "[concat(variables('loadBalancerSettings').defaultInboundRules, parameters('customInboundRules').rules)]"
          }
        }
      }
    },

    {
      "name": "UpdatingVnetDns",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingDomainController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingVnetDnsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "vnetAddressRange": {
            "value": "[variables('vnetAddressRange')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "subnetAddressRange": {
            "value": "[variables('subnetAddressRange')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "location": {
            "value": "[variables('location')]"
          }
        }
      }
    },

    {
      "name": "CreatingJumpBox",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/UpdatingVnetDns",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp",
		"Microsoft.Resources/deployments/CreatingVdiExtensions",
		"Microsoft.Resources/deployments/CreatingDomainController"		
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('jumpBoxSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "machineSize": {
            "value": "[variables('jumpBoxSettings').machineSize]"
          },
          "machineName": {
            "value": "[variables('jumpBoxSettings').machineName]"
          },
          "publisher": {
            "value": "[variables('jumpBoxSettings').publisher]"
          },
          "offer": {
            "value": "[variables('jumpBoxSettings').offer]"
          },
          "sku": {
            "value": "[variables('jumpBoxSettings').sku]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('jumpBoxSettings').inboundRules, parameters('customInboundRules').assignments.jumpBox)]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "shortcuts": {
            "value": "[variables('jumpBoxSettings').shortcuts]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('jumpBoxSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('jumpBoxSettings').configurationFunction]"
          },
		  "domainName": {
            "value": "[parameters('domainName')]"
          },
		  "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
		  "deliveryControllerFQDN": {
            "value": "[variables('XAControllerSetting').fqdn]"
          },		                      
		  "deploymentFQDN": {
            "value": "[variables('deploymentFQDN')]"
		  },
		  "gatewayFQDN": {
            "value": "[variables('gatewayFQDN')]"
		  },
		  "customerId": {
            "value":"[parameters('Customer')]"
		  },
		  "clientId": {
            "value":"[parameters('clientID')]"
		  },			
		  "ClientSecret": {
            "value":"[parameters('clientSecret')]"
		  },			
		  "ResourceLocationId": {
            "value":"[parameters('ResourceLocationId')]"
		  },
          "azureGov": {
            "value": "[parameters('azureGov')]"
          },
		  "IsTestControlePlane" :{
			"value": "[parameters('UseTestControlPlane')]"
		  },
		  "CreateMasterImage" :{
			"value": "[parameters('CreateMasterImage')]"
		  }		  
        }
      }
    },

    {
      "name": "CreatingDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp",
        "Microsoft.Compute/availabilitySets/availabilitySet"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('domainControllerSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "publisher": {
            "value": "[variables('domainControllerSettings').publisher]"
          },
          "offer": {
            "value": "[variables('domainControllerSettings').offer]"
          },
          "sku": {
            "value": "[variables('domainControllerSettings').sku]"
          },
          "machineSize": {
            "value": "[variables('domainControllerSettings').machineSize]"
          },
          "machineName": {
            "value": "[variables('domainControllerSettings').machineName]"
          },
          "privateIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('domainControllerSettings').inboundRules, parameters('customInboundRules').assignments.domainController)]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('domainControllerSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('domainControllerSettings').configurationFunction]"
          },
          "azureGov": {
            "value": "[parameters('azureGov')]"
          }
        }
      }
    },

    {
      "name": "CreatingNetScaler",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp",
        "Microsoft.Resources/deployments/UpdatingVnetDns"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('netScalerSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "machineSize": {
            "value": "[variables('netScalerSettings').machineSize]"
          },
          "publisher": {
            "value": "[variables('netScalerSettings').publisher]"
          },
          "offer": {
            "value": "[variables('netScalerSettings').offer]"
          },
          "sku": {
            "value": "[variables('netScalerSettings').sku]"
          },
          "version": {
            "value": "[variables('netScalerSettings').version]"
          },
          "machineName": {
            "value": "[variables('netScalerSettings').machineName]"
          },
          "privateIp": {
            "value": "[variables('netScalerSettings').privateIp]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('netScalerSettings').inboundRulesInitial, parameters('customInboundRules').assignments.netScaler)]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "azureGov": {
            "value": "[parameters('azureGov')]"
          }
        }
      }
    },	
				
    {
      "name": "CreatingXAController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingNetScaler",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp",
        "Microsoft.Resources/deployments/CreatingNetScaler"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('XAControllerSetting').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {

          // Infrastructure
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "imageUri": {
            "value": "[variables('XAControllerSetting').userImageUri]"
          },
          "publisher": {
            "value": "[variables('XAControllerSetting').publisher]"
          },
          "offer": {
            "value": "[variables('XAControllerSetting').offer]"
          },
          "sku": {
            "value": "[variables('XAControllerSetting').sku]"
          },
          "machineSize": {
            "value": "[variables('XAControllerSetting').machineSize]"
          },
          "machineName": {
            "value": "[variables('XAControllerSetting').machineName]"
          },
          "privateIp": {
            "value": "[variables('XAControllerSetting').privateIp]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('XAControllerSetting').inboundRulesInitial, parameters('customInboundRules').assignments.deliveryController)]"
          },

          // Credentials and domain
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerPrivateIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "location": {
            "value": "[variables('location')]"
          },

          // Delegated servers
          "sqlServerFQDN": {
            "value": "[variables('sqlServerSettings').fqdn]"
          },
          "sqlServerInstance": {
            "value": "[variables('sqlServerSettings').instance]"
          },
          "licenseServerFQDN": {
            "value": "[variables('licenseServerSettings').fqdn]"
          },
          "netScalerPrivateIp": {
            "value": "[variables('netScalerSettings').privateIp]"
          },

          // StoreFront
          "storeFrontFQDN": {
            "value": "[variables('storeFrontSettings').fqdn]"
          },
          "virtualServerName": {
            "value": "[variables('netScalerSettings').virtualServerName]"
          },
          "virtualServerPort": {
            "value": "[variables('netScalerSettings').httpsPort]"
          },
          "forwardServerPort": {
            "value": "[variables('netScalerSettings').httpPort]"
          },
          "storeFrontGatewayName": {
            "value": "[variables('storeFrontSettings').gatewayName]"
          },
          "emailAddress": {
            "value": "[parameters('emailAddress')]"
          },
          "certificateAuthority": {
            "value": "[parameters('certificateAuthority')]"
          },
          "acmeServer": {
            "value": "[parameters('acmeServer')]"
          },
          "gatewayFQDN": {
            "value": "[variables('gatewayFQDN')]"
          },
          "deploymentFQDN": {
            "value": "[variables('deploymentFQDN')]"
          },
          "themeUri": {
            "value": "[variables('storeFrontSettings').themeUri]"
          },
          "html5Mode": {
            "value": "[variables('storeFrontSettings').html5Mode]"
          },
          "appGroups": {
            "value": "[concat(variables('storeFrontSettings').appGroups, parameters('customApplications').appGroups)]"
          },

          // Delivery controller
          "deliveryControllerFQDN": {
            "value": "[concat(variables('XAControllerSetting').fqdn)]"
          },
          "siteName": {
            "value": "[variables('siteName')]"
          },

          // Configuration
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('XAControllerSetting').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('XAControllerSetting').configurationFunction]"
          },
          "azureGov": {
            "value": "[parameters('azureGov')]"
          },
		  "customerId": {
            "value": "[variables('XAControllerSetting').customerId]"
		  },
		  "clientId": {
            "value": "[variables('XAControllerSetting').clientId]"
		  },
		  "ClientSecret":{
            "value":  "[variables('XAControllerSetting').ClientSecret]"
		  },
		  "ResourceLocationId":{
            "value":  "[variables('XAControllerSetting').ResourceLocationId]"
		  }
        }
      }
    },
    {
      "name": "CreatingXAControllerExtension",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingXAController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('XAControllerSetting').ExtensionUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {

          // Infrastructure
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "imageUri": {
            "value": "[variables('XAControllerSetting').userImageUri]"
          },
          "publisher": {
            "value": "[variables('XAControllerSetting').publisher]"
          },
          "offer": {
            "value": "[variables('XAControllerSetting').offer]"
          },
          "sku": {
            "value": "[variables('XAControllerSetting').sku]"
          },
          "machineSize": {
            "value": "[variables('XAControllerSetting').machineSize]"
          },
          "machineName": {
            "value": "[variables('XAControllerSetting').machineName]"
          },
          "privateIp": {
            "value": "[variables('XAControllerSetting').privateIp]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('XAControllerSetting').inboundRulesInitial, parameters('customInboundRules').assignments.deliveryController)]"
          },

          // Credentials and domain
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerPrivateIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "location": {
            "value": "[variables('location')]"
          },

          // Delegated servers
          "sqlServerFQDN": {
            "value": "[variables('sqlServerSettings').fqdn]"
          },
          "sqlServerInstance": {
            "value": "[variables('sqlServerSettings').instance]"
          },
          "licenseServerFQDN": {
            "value": "[variables('licenseServerSettings').fqdn]"
          },
          "netScalerPrivateIp": {
            "value": "[variables('netScalerSettings').privateIp]"
          },

          // StoreFront
          "storeFrontFQDN": {
            "value": "[variables('storeFrontSettings').fqdn]"
          },
          "virtualServerName": {
            "value": "[variables('netScalerSettings').virtualServerName]"
          },
          "virtualServerPort": {
            "value": "[variables('netScalerSettings').httpsPort]"
          },
          "forwardServerPort": {
            "value": "[variables('netScalerSettings').httpPort]"
          },
          "storeFrontGatewayName": {
            "value": "[variables('storeFrontSettings').gatewayName]"
          },
          "emailAddress": {
            "value": "[parameters('emailAddress')]"
          },
          "certificateAuthority": {
            "value": "[parameters('certificateAuthority')]"
          },
          "acmeServer": {
            "value": "[parameters('acmeServer')]"
          },
          "gatewayFQDN": {
            "value": "[variables('gatewayFQDN')]"
          },
          "deploymentFQDN": {
            "value": "[variables('deploymentFQDN')]"
          },
          "themeUri": {
            "value": "[variables('storeFrontSettings').themeUri]"
          },
          "html5Mode": {
            "value": "[variables('storeFrontSettings').html5Mode]"
          },
          "appGroups": {
            "value": "[concat(variables('storeFrontSettings').appGroups, parameters('customApplications').appGroups)]"
          },

          // Delivery controller
          "deliveryControllerFQDN": {
            "value": "[concat(variables('XAControllerSetting').fqdn)]"
          },
          "siteName": {
            "value": "[variables('siteName')]"
          },

          // Configuration
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('XAControllerSetting').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('XAControllerSetting').configurationFunction]"
          },
          "azureGov": {
            "value": "[parameters('azureGov')]"
          },
		  "customerId": {
            "value": "[variables('XAControllerSetting').customerId]"
		  },
		  "clientId": {
            "value": "[variables('XAControllerSetting').clientId]"
		  },
		  "ClientSecret":{
            "value":  "[variables('XAControllerSetting').ClientSecret]"
		  },
		  "ResourceLocationId":{
            "value":  "[variables('XAControllerSetting').ResourceLocationId]"
		  },
		  "CustomCloudConnectorScriptUri":{
 		   "value": "[parameters('CustomCloudConnectorScriptUri')]"
		  },
		  "CustomCloudConnectorScriptArgs" :{
		   "value": "[parameters('CustomCloudConnectorScriptArgs')]"
		  }
        }
      }
    },
        
	{
	  "condition": "[equals(parameters('CreateClientVDI'),'true')]",
      "name": "CreatingVDI",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
		    "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
		    "Microsoft.Resources/deployments/UpdatingVnetDns",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vdiSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "machineSize": {
            "value": "[variables('vdiSettings').machineSize]"
          },
          "machineName": {
            "value": "[variables('vdiSettings').machineName]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('vdiSettings').inboundRules, parameters('customInboundRules').assignments.jumpBox)]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
		      "configurationFileUrl": {
            "value": "[variables('vdiSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('vdiSettings').configurationFunction]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },          
		      "domainName": {
            "value": "[parameters('domainName')]"
          },
		      "privateIp": {
            "value": "[variables('vdiSettings').privateIp]"
          },
		      "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
		      "deliveryControllerFQDN": {
            "value": "[variables('XAControllerSetting').fqdn]"
          },		           
		      "deploymentFQDN": {
                "value": "[variables('deploymentFQDN')]"
		      },
		      "gatewayFQDN": {
                "value": "[variables('gatewayFQDN')]"
		      },		  
          "azureGov": {
            "value": "[parameters('azureGov')]"
          }
        }
      }
    },
	{
      "name": "CreatingVdiExtensions",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingVDI"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vdiSettings').extensionUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {          
          "location": {
            "value": "[variables('location')]"
          },
          "machineName": {
            "value": "[variables('vdiSettings').vdiPrefix]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "deliveryControllerFQDN": {
            "value": "[variables('XAControllerSetting').fqdn]"
          },
          "domainControllerIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
		  "artifactsLocationUri": {
            "value": "[parameters('artifactsBaseUrl')]"
          },
		  "InstallerPath" : {
		    "value": "[parameters('ClientVDIInstallerUri')]"
		  },
		  "CreateMasterImage" : {
		    "value": "[parameters('CreateMasterImage')]"
		  }
        }
      }
    },	
	{
	  "condition": "[equals(parameters('CreateSharedHostedVDI'),'true')]",
      "name": "CreatingVDIServer",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
		    "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
		    "Microsoft.Resources/deployments/UpdatingVnetDns",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vdiServerSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[variables('vhdStorageAccount')]"
          },
          "machineSize": {
            "value": "[variables('vdiServerSettings').machineSize]"
          },
          "machineName": {
            "value": "[variables('vdiServerSettings').machineName]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('vdiServerSettings').inboundRules, parameters('customInboundRules').assignments.jumpBox)]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
		      "configurationFileUrl": {
            "value": "[variables('vdiServerSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('vdiServerSettings').configurationFunction]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
		    "privateIp": {
            "value": "[variables('vdiServerSettings').privateIp]"
          },
		    "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
		    "deliveryControllerFQDN": {
            "value": "[variables('XAControllerSetting').fqdn]"
          },		            
		    "deploymentFQDN": {
            "value": "[variables('deploymentFQDN')]"
		    },
		    "gatewayFQDN": {
              "value": "[variables('gatewayFQDN')]"
		    },		  
          "azureGov": {
            "value": "[parameters('azureGov')]"
        },
		    "publisher" : {
              "value": "[variables('vdiServerSettings').publisher]"
        },
		    "offer" : {
              "value": "[variables('vdiServerSettings').offer]"
        },
		    "sku" : {
              "value": "[variables('vdiServerSettings').sku]"
        }
       }
      }
    },
    {
      "condition": "[equals(parameters('CreateSharedHostedVDI'),'true')]",
      "name": "CreatingVdiServerExtensions",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingVDIServer"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vdiServerSettings').extensionUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "machineName": {
            "value": "[variables('vdiServerSettings').vdiPrefix]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "deliveryControllerFQDN": {
            "value": "[variables('XAControllerSetting').fqdn]"
          },
          "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "artifactsLocationUri": {
            "value": "[parameters('artifactsBaseUrl')]"
          },
          "configurationFileUrl": {
            "value": "[variables('vdiServerSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('vdiServerSettings').configurationFunction]"
          },
          "InstallerPath": {
            "value": "[parameters('SharedHostedVDIInstallerUri')]"
          },
          "CreateMasterImage": {
            "value": "[parameters('CreateMasterImage')]"
          }
        }
      }
    },	
    {
      "name": "UpdatingInboundRules",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingXAControllerExtension"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingInboundRuleUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "loadBalancerName": {
            "value": "[variables('loadBalancerSettings').name]"
          },
          "loadBalancerId": {
            "value": "[variables('loadBalancerSettings').id]"
          },
          "inboundRuleName": {
            "value": "ns-http"
          },
          "frontendPort": {
            "value": "[variables('ports').http]"
          },
          "backendPort": {
            "value": "[variables('netScalerSettings').httpPort]"
          }
        }
      }
    },
    {
      "name": "UpdatingXAControllerNic",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/UpdatingInboundRules"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingNicRulesUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": {
            "value": "[reference('CreatingXAController').outputs.nicName.value]"
          },
          "privateIp": {
            "value": "[variables('XAControllerSetting').privateIp]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "rules": {
            "value": "[concat(variables('XAControllerSetting').inboundRulesFinal, parameters('customInboundRules').assignments.deliveryController)]"
          },
          "location": {
            "value": "[variables('location')]"
          }
        }
      }
    },	
	
    {
      "name": "UpdatingNetScalerNic",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/UpdatingXAControllerNic"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingNicRulesUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": {
            "value": "[reference('CreatingNetScaler').outputs.nicName.value]"
          },
          "privateIp": {
            "value": "[variables('netScalerSettings').privateIp]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "rules": {
            "value": "[concat(variables('netScalerSettings').inboundRulesFinal, parameters('customInboundRules').assignments.netScaler)]"
          },
          "location": {
            "value": "[variables('location')]"
          }
        }
      }
    }	
  ],
  
  "outputs": {
    "netScalerGateway": {
      "type": "string",
      "value": "[concat('https://', variables('gatewayFQDN'))]"
    }
  }
}